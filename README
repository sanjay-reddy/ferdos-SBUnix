* The provided Makefile:
  1) builds a kernel
  2) copies it into rootfs/boot/kernel/kernel
  3) creates an ISO CD image with the rootfs/ contents

* To boot the system in QEMU, run:
qemu-system-x86_64 -curses -drive id=boot,format=raw,file=$USER.img,if=none -drive id=data,format=raw,file=$USER-data.img,if=none -device ahci,id=ahci -device ide-drive,drive=boot,bus=ahci.0 -device ide-drive,drive=data,bus=ahci.1 -gdb tcp::9999

Explanation of parameters:
  -curses         use a text console (omit this to use default SDL/VNC console)
  -drive ...      connect a CD-ROM or hard drive with corresponding image
  -device ...     configure an AHCI controller for the boot and data disks
  -gdb tcp::9999  listen for "remote" debugging connections on port NNNN
  -S              wait for GDB to connect at startup
  -no-reboot      prevent reboot when OS crashes

* When using the -curses mode, switch to the qemu> console with ESC-2.

* To connect a remote debugger to the running qemu VM, from a different window:
gdb ./kernel

At the (gdb) prompt, connect with:
target remote localhost:9999


If you’d really like to work on your own machine
We do not provide support for it, but you can get your own usable environment for the course projects up and running by installing Ubuntu 16.04 and:
apt-get install build-essential gdb git screen tmux emacs exuberant-ctags ccache eclipse xterm gtkwave tcl-dev zsh strace curl mkisofs qemu dosfstools syslinux
Unfortunately, the standard version of gdb does not correctly handle QEMU’s 64-bit boot process, resulting in a ‘Packet too long’ error. The version of gdb in the course containers already fixes this. If you are working on your own machine, you will need to build gdb from source and apply a patch.(https://sourceware.org/bugzilla/attachment.cgi?id=8512)
